{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs28 \cf0 \
This is the "Nav Views" example app.\
\
It was created with Xcode 4.3 for iOS 5.1 SDK in June 2012. \
\
Most nav-based apps use a table view (UITableViewController) to manage a table, or list, of data. Tapping a row will cause a transition to a next-level view controller, which may or may not display a table. \
\
This app will show you how to create a nav-based app where the initial screen is NOT a table view. Sometimes, you see this in an app that has a "launch" screen, which exposes its functionality graphically, or with some user interface elements other than a table view. \
\
Start with a Single View Application. \
\
Add a model class, and add a declared property for the model in the existing view controller. Edit the app delegate so that it passes on the model object when the app launches. Test your work before continuing. \
\
On the storyboard, embed the existing view controller in a navigation controller. Set its title. \
\
Add a button to the scene. Do NOT add an IBAction. \
\
Add a new view controller to the storyboard; position it to the right of the existing view controller scene. Set its title if you wish. Add a label, and configure it as an outlet. \
\
Add a segue, from the button, to the new view controller; it will be a "push" segue. \
\
Next, add a new view controller class (in this app, its name is "NewVC") to your project. Add a declared property for the model. \
\
In the original view controller code, add a prepareForSegue:sender method, which will run when the button is tapped. Pass on the model object to the destination view controller. \
\
In the new view controller code, edit viewDidLoad: so that it displays the text from the model object in the label. \
}